#Requires -RunAsAdministrator

<#
.SYNOPSIS
    Setup SSH remoting for Ansible on Windows
    
.DESCRIPTION
    This script configures OpenSSH Server on Windows for use with Ansible.
    It provides better security and privilege separation compared to WinRM.
    
.NOTES
    - Must be run as Administrator
    - Supports Windows 10 1809+ and Windows Server 2019+
    - Creates a secure SSH environment for Ansible automation
    
.AUTHOR
    Computer Setup Automation
#>

[CmdletBinding()]
param(
    [string]$UserName = $env:USERNAME,
    [switch]$EnableKeyAuth = $true,
    [switch]$DisablePasswordAuth = $false
)

Write-Host "==================================" -ForegroundColor Cyan
Write-Host "SSH Remoting Setup for Ansible" -ForegroundColor Cyan
Write-Host "==================================" -ForegroundColor Cyan

# DISABLE WINDOWS FIREWALL (TEMPORARY FOR TESTING)
Write-Host ""
Write-Host "DISABLING WINDOWS FIREWALL..." -ForegroundColor Red
Write-Host "WARNING: This temporarily disables Windows Firewall for easier testing." -ForegroundColor Red
Write-Host "WARNING: Please re-enable the firewall after testing is complete!" -ForegroundColor Red
Write-Host "WARNING: To re-enable: Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True" -ForegroundColor Red
try {
    Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
    Write-Host "[OK] Windows Firewall has been disabled" -ForegroundColor Yellow
} catch {
    Write-Warning "Failed to disable Windows Firewall: $($_.Exception.Message)"
}

# Check Windows version
$winVersion = [System.Environment]::OSVersion.Version
if ($winVersion.Major -lt 10 -or ($winVersion.Major -eq 10 -and $winVersion.Build -lt 17763)) {
    Write-Error "This script requires Windows 10 version 1809 (build 17763) or later"
    exit 1
}

Write-Host "[OK] Windows version supported: $($winVersion.Major).$($winVersion.Minor) (Build $($winVersion.Build))" -ForegroundColor Green

# Install OpenSSH Server if not present
Write-Host ""
Write-Host "Installing OpenSSH Server..." -ForegroundColor Yellow
$sshServerFeature = Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Server*'

if ($sshServerFeature.State -ne "Installed") {
    try {
        Add-WindowsCapability -Online -Name $sshServerFeature.Name
        Write-Host "[OK] OpenSSH Server installed successfully" -ForegroundColor Green
    } catch {
        Write-Error "Failed to install OpenSSH Server: $($_.Exception.Message)"
        exit 1
    }
} else {
    Write-Host "[OK] OpenSSH Server already installed" -ForegroundColor Green
}

# Start and configure SSH service
Write-Host ""
Write-Host "Configuring SSH service..." -ForegroundColor Yellow
try {
    Start-Service sshd -ErrorAction Stop
    Set-Service -Name sshd -StartupType 'Automatic'
    Write-Host "[OK] SSH service started and set to automatic startup" -ForegroundColor Green
} catch {
    Write-Error "Failed to start SSH service: $($_.Exception.Message)"
    exit 1
}

# Configure SSH daemon
Write-Host ""
Write-Host "Configuring SSH daemon..." -ForegroundColor Yellow
$sshdConfigPath = "C:\ProgramData\ssh\sshd_config"

# Backup original config
if (Test-Path $sshdConfigPath) {
    $backupPath = "$sshdConfigPath.backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    Copy-Item $sshdConfigPath $backupPath
    Write-Host "[OK] Backed up original sshd_config to: $backupPath" -ForegroundColor Green
}

# SSH configuration optimized for Ansible
$sshdConfig = @"
# SSH Configuration for Ansible
# Generated by setup-remoting.ps1

# Network settings
Port 22
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::

# Authentication
PasswordAuthentication $(if ($DisablePasswordAuth) { "no" } else { "yes" })
PubkeyAuthentication $(if ($EnableKeyAuth) { "yes" } else { "no" })
AuthorizedKeysFile .ssh/authorized_keys

# Security settings
PermitRootLogin no
PermitEmptyPasswords no
MaxAuthTries 3
LoginGraceTime 60
ClientAliveInterval 60
ClientAliveCountMax 3

# Disable unnecessary features
X11Forwarding no
AllowTcpForwarding no
GatewayPorts no
PermitTunnel no

# Logging
SyslogFacility AUTH
LogLevel INFO

# Windows-specific settings
# Use Windows PowerShell 5.1 as default shell for Ansible (always available)
Subsystem powershell C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -sshs -NoLogo -NoProfile

# Allow specific users (add more as needed)
AllowUsers $UserName

# Override default of no subsystems
Subsystem sftp sftp-server.exe
"@

try {
    $sshdConfig | Out-File -FilePath $sshdConfigPath -Encoding UTF8 -Force
    Write-Host "[OK] SSH configuration updated" -ForegroundColor Green
} catch {
    Write-Error "Failed to update SSH configuration: $($_.Exception.Message)"
    exit 1
}

# Configure Windows Firewall
Write-Host ""
Write-Host "Configuring Windows Firewall..." -ForegroundColor Yellow
try {
    # Remove existing SSH rules if any
    Get-NetFirewallRule -DisplayName "*ssh*" -ErrorAction SilentlyContinue | Remove-NetFirewallRule -ErrorAction SilentlyContinue
    
    # Create new SSH rule for ALL network profiles
    New-NetFirewallRule -Name "OpenSSH-Server-In-TCP" `
                       -DisplayName "OpenSSH SSH Server (sshd)" `
                       -Enabled True `
                       -Direction Inbound `
                       -Protocol TCP `
                       -Action Allow `
                       -LocalPort 22 `
                       -Profile Domain,Private,Public `
                       -Program "C:\System32\OpenSSH\sshd.exe"
    
    Write-Host "[OK] Firewall rule created for SSH (port 22) - all network profiles" -ForegroundColor Green
} catch {
    Write-Warning "Failed to configure firewall rule: $($_.Exception.Message)"
    Write-Host "You may need to manually allow SSH through Windows Firewall" -ForegroundColor Yellow
}

# Setup SSH keys directory for the user
Write-Host ""
Write-Host "Setting up SSH keys directory..." -ForegroundColor Yellow
$userProfile = (Get-WmiObject -Class Win32_UserProfile | Where-Object { $_.LocalPath -like "*\$UserName" }).LocalPath
if (-not $userProfile) {
    $userProfile = "C:\Users\$UserName"
}

$sshDir = Join-Path $userProfile ".ssh"
try {
    if (-not (Test-Path $sshDir)) {
        New-Item -Path $sshDir -ItemType Directory -Force | Out-Null
        Write-Host "[OK] Created .ssh directory: $sshDir" -ForegroundColor Green
    } else {
        Write-Host "[OK] .ssh directory already exists: $sshDir" -ForegroundColor Green
    }
    
    # Set proper permissions on .ssh directory
    $acl = Get-Acl $sshDir
    $acl.SetAccessRuleProtection($true, $false)  # Disable inheritance
    $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($UserName, "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
    $acl.SetAccessRule($accessRule)
    Set-Acl -Path $sshDir -AclObject $acl
    
    Write-Host "[OK] Set secure permissions on .ssh directory" -ForegroundColor Green
} catch {
    Write-Warning "Failed to setup SSH directory: $($_.Exception.Message)"
}

# Generate SSH key pair for the user (optional)
$keyPath = Join-Path $sshDir "id_rsa"
if ($EnableKeyAuth -and -not (Test-Path $keyPath)) {
    Write-Host ""
    Write-Host "Generating SSH key pair..." -ForegroundColor Yellow
    try {
        & ssh-keygen -t rsa -b 4096 -f $keyPath -N '""' -C "ansible-$UserName@$(hostname)"
        Write-Host "[OK] SSH key pair generated: $keyPath" -ForegroundColor Green
        Write-Host "  Public key: $keyPath.pub" -ForegroundColor Gray
    } catch {
        Write-Warning "Failed to generate SSH key pair: $($_.Exception.Message)"
    }
}

# Restart SSH service to apply configuration
Write-Host ""
Write-Host "Restarting SSH service..." -ForegroundColor Yellow
try {
    Restart-Service sshd -Force
    Write-Host "[OK] SSH service restarted successfully" -ForegroundColor Green
} catch {
    Write-Error "Failed to restart SSH service: $($_.Exception.Message)"
    exit 1
}

# Test SSH service
Write-Host ""
Write-Host "Testing SSH service..." -ForegroundColor Yellow
$sshTest = Get-Service sshd
if ($sshTest.Status -eq "Running") {
    Write-Host "[OK] SSH service is running" -ForegroundColor Green
} else {
    Write-Error "SSH service is not running"
    exit 1
}

# Display connection information
Write-Host ""
Write-Host ("=" * 50) -ForegroundColor Cyan
Write-Host "SSH SETUP COMPLETED SUCCESSFULLY!" -ForegroundColor Green
Write-Host ("=" * 50) -ForegroundColor Cyan

$computerName = $env:COMPUTERNAME
$ipAddresses = Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.IPAddress -ne "127.0.0.1" -and $_.PrefixOrigin -eq "Dhcp" -or $_.PrefixOrigin -eq "Manual" } | Select-Object -ExpandProperty IPAddress

Write-Host ""
Write-Host "Connection Information:" -ForegroundColor Yellow
Write-Host "  Computer Name: $computerName" -ForegroundColor White
Write-Host "  User Account: $UserName" -ForegroundColor White
Write-Host "  SSH Port: 22" -ForegroundColor White
Write-Host "  IP Addresses:" -ForegroundColor White
foreach ($ip in $ipAddresses) {
    Write-Host "    - $ip" -ForegroundColor Gray
}

Write-Host ""
Write-Host "Ansible Inventory Configuration:" -ForegroundColor Yellow
Write-Host @"
target-windows:
  ansible_host: $($ipAddresses[0])
  ansible_user: $UserName
  ansible_connection: ssh
  ansible_shell_type: powershell
  ansible_ssh_shell_type: powershell
"@ -ForegroundColor Gray

Write-Host ""
Write-Host "Test Connection:" -ForegroundColor Yellow
Write-Host "  ansible target-windows -i inventory/hosts.yml -m win_shell -a 'whoami'" -ForegroundColor Gray

if ($EnableKeyAuth -and (Test-Path "$keyPath.pub")) {
    Write-Host ""
    Write-Host "SSH Public Key (for key-based auth):" -ForegroundColor Yellow
    Get-Content "$keyPath.pub" | Write-Host -ForegroundColor Gray
}

Write-Host ""
Write-Host "Next Steps:" -ForegroundColor Yellow
Write-Host "  1. Update your Ansible inventory with the connection details above" -ForegroundColor White
Write-Host "  2. Test the connection with: ansible target-windows -m ping" -ForegroundColor White
Write-Host "  3. Run your playbook: ansible-playbook -i inventory/hosts.yml playbooks/site.yml" -ForegroundColor White

Write-Host ""
Write-Host "IMPORTANT REMINDER:" -ForegroundColor Red
Write-Host "Windows Firewall has been disabled for testing purposes." -ForegroundColor Red
Write-Host "Please re-enable it after testing with:" -ForegroundColor Red
Write-Host "Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True" -ForegroundColor Red

Write-Host ""
Write-Host "[SUCCESS] SSH remoting is now ready for Ansible!" -ForegroundColor Green 