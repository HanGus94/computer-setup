---
# Firefox Configuration Role - Main Tasks
# =======================================
# Deploys Firefox configuration files to the correct Windows locations

- name: "Get Firefox profile directory"
  win_shell: |
    $appDataPath = [Environment]::GetFolderPath('ApplicationData')
    $firefoxPath = Join-Path $appDataPath "Mozilla\Firefox\Profiles"
    return $firefoxPath
  register: firefox_profiles_path
  changed_when: false

- name: "Find Firefox profiles ending with -release"
  win_find:
    paths: "{{ firefox_profiles_path.stdout | trim }}"
    file_type: directory
    patterns: "*-release"
  register: firefox_release_profiles
  failed_when: false

- name: "Find other Firefox default profiles (fallback)"
  win_find:
    paths: "{{ firefox_profiles_path.stdout | trim }}"
    file_type: directory
    patterns: "*.default*"
  register: firefox_default_profiles
  failed_when: false
  when: firefox_release_profiles.files | length == 0

- name: "Create default-release Firefox profile directory if none exists"
  win_file:
    path: "{{ firefox_profiles_path.stdout | trim }}\\default-release"
    state: directory
  when: 
    - firefox_release_profiles.files | length == 0
    - (firefox_default_profiles.files | default([]) | length == 0)

- name: "Set target Firefox profile directory (prioritize -release profiles)"
  set_fact:
    firefox_target_profile: >-
      {{
        firefox_release_profiles.files[0].path if firefox_release_profiles.files | length > 0
        else (firefox_default_profiles.files[0].path if (firefox_default_profiles.files | default([]) | length > 0)
        else (firefox_profiles_path.stdout | trim) + '\\default-release')
      }}

- name: "Create chrome directory for userChrome.css"
  win_file:
    path: "{{ firefox_target_profile }}\\chrome"
    state: directory

- name: "Find Firefox configuration files on controller"
  find:
    paths: "{{ role_path }}/{{ firefox_config.source_directory }}"
    file_type: file
    recurse: yes
  register: firefox_config_files
  delegate_to: localhost
  when: firefox_config.copy_configs | default(true)

- name: "Copy userChrome.css to chrome directory"
  win_copy:
    src: "{{ item.path }}"
    dest: "{{ firefox_target_profile }}\\chrome\\{{ item.path | basename }}"
    backup: yes
  loop: "{{ firefox_config_files.files }}"
  when: 
    - firefox_config.copy_configs | default(true)
    - firefox_config_files.files is defined
    - item.path | basename == "userChrome.css"
  register: userchrome_copy_result

- name: "Copy other Firefox configuration files to profile root"
  win_copy:
    src: "{{ item.path }}"
    dest: "{{ firefox_target_profile }}\\{{ item.path | basename }}"
    backup: yes
  loop: "{{ firefox_config_files.files }}"
  when: 
    - firefox_config.copy_configs | default(true)
    - firefox_config_files.files is defined
    - item.path | basename != "userChrome.css"
  register: other_files_copy_result

- name: "Display Firefox configuration summary"
  debug:
    msg: "Firefox configuration deployment completed - Target: {{ firefox_target_profile }}, userChrome.css: {{ userchrome_copy_result.results | length if userchrome_copy_result is defined else 0 }}, Other files: {{ other_files_copy_result.results | length if other_files_copy_result is defined else 0 }}"

- name: "Launch Firefox to verify configuration"
  win_shell:
    cmd: "start firefox"
  when: firefox_target_profile.endswith('-release')

- name: "Enable userChrome.css in about:config"
  win_shell:
    cmd: "start firefox -about:config"
  when: firefox_target_profile.endswith('-release')

- name: "Install Sidebery extension if not already installed"
  win_shell:
    cmd: "start firefox -addons https://addons.mozilla.org/firefox/addon/sidebery/"
  when: firefox_target_profile.endswith('-release')

- name: "Restart Firefox to apply userChrome.css changes"
  win_shell:
    cmd: "start firefox -p {{ firefox_target_profile }}"
  when: firefox_target_profile.endswith('-release')

- name: "Check that preferences and settings are properly applied"
  win_shell:
    cmd: "start firefox -about:config"
  when: firefox_target_profile.endswith('-release') 