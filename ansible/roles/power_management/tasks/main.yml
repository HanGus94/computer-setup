---
# Power Management Role - Main Tasks
# ==================================
# Manages Windows power plans including Ultimate Performance

- name: "Check if power management is enabled"
  debug:
    msg: "Power management configuration started - setting {{ power_management.power_plan }} power plan"
  when: install_categories.power_management | default(true)

- name: "Get current active power scheme"
  win_shell: powercfg /getactivescheme
  register: current_power_scheme
  changed_when: false
  when: install_categories.power_management | default(true)

- name: "Display current power scheme"
  debug:
    msg: "Current active power scheme: {{ current_power_scheme.stdout.strip() }}"
  when: 
    - install_categories.power_management | default(true)
    - current_power_scheme.stdout is defined

- name: "List available power schemes"
  win_shell: powercfg /list
  register: available_schemes
  changed_when: false
  when: install_categories.power_management | default(true)

- name: "Check if Ultimate Performance plan exists"
  set_fact:
    ultimate_performance_exists: "{{ 'Ultimate Performance' in available_schemes.stdout or 'Ultimate performance' in available_schemes.stdout }}"
  when: 
    - install_categories.power_management | default(true)
    - power_management.power_plan == "ultimate_performance"

- name: "Extract existing Ultimate Performance GUID (if exists)"
  set_fact:
    existing_ultimate_guid: "{{ available_schemes.stdout | regex_search('([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}).*Ultimate [Pp]erformance', '\\1') | first }}"
  when: 
    - install_categories.power_management | default(true)
    - power_management.power_plan == "ultimate_performance"
    - ultimate_performance_exists | default(false)
  failed_when: false

- name: "Enable Ultimate Performance power plan (if not exists)"
  win_shell: powercfg /duplicatescheme {{ power_plan_guids.ultimate_performance }}
  register: enable_ultimate_result
  when: 
    - install_categories.power_management | default(true)
    - power_management.power_plan == "ultimate_performance"
    - power_management.enable_ultimate_performance | default(true)
    - not (ultimate_performance_exists | default(false))
  failed_when: false

- name: "Extract new Ultimate Performance GUID (if duplicated)"
  set_fact:
    new_ultimate_guid: "{{ enable_ultimate_result.stdout.strip() | regex_replace('.*([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}).*', '\\1') }}"
  when: 
    - install_categories.power_management | default(true)
    - enable_ultimate_result is defined
    - enable_ultimate_result is not skipped
    - enable_ultimate_result.rc is defined
    - enable_ultimate_result.rc == 0
    - enable_ultimate_result.stdout is defined
    - enable_ultimate_result.stdout.strip() | regex_search('[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}')

- name: "Display Ultimate Performance enablement result"
  debug:
    msg: "{{ 'Ultimate Performance enabled with new GUID: ' + enable_ultimate_result.stdout.strip() if enable_ultimate_result.rc == 0 else 'Failed to enable Ultimate Performance: ' + (enable_ultimate_result.stderr | default('Unknown error')) }}"
  when: 
    - install_categories.power_management | default(true)
    - enable_ultimate_result is defined
    - enable_ultimate_result is not skipped
    - enable_ultimate_result.rc is defined

- name: "Get target power plan GUID"
  set_fact:
    target_power_guid: >-
      {{
        new_ultimate_guid if (power_management.power_plan == "ultimate_performance" and new_ultimate_guid is defined)
        else existing_ultimate_guid if (power_management.power_plan == "ultimate_performance" and existing_ultimate_guid is defined)
        else power_plan_guids[power_management.power_plan]
      }}
  when: install_categories.power_management | default(true)

- name: "Debug GUID selection"
  debug:
    msg: "Using {{ power_management.power_plan }} GUID: {{ target_power_guid }} {{ '(newly created)' if new_ultimate_guid is defined else ('(existing duplicate)' if existing_ultimate_guid is defined else '(default)') }}"
  when: 
    - install_categories.power_management | default(true)
    - target_power_guid is defined

- name: "Check if target power plan is already active"
  set_fact:
    plan_already_active: "{{ target_power_guid | lower in current_power_scheme.stdout | lower }}"
  when: 
    - install_categories.power_management | default(true)
    - current_power_scheme.stdout is defined
    - target_power_guid is defined

- name: "Set power plan to {{ power_management.power_plan }}"
  win_shell: powercfg /setactive {{ target_power_guid }}
  register: set_power_plan_result
  when: 
    - install_categories.power_management | default(true)
    - target_power_guid is defined
    - (not (plan_already_active | default(false)) or power_management.force_set | default(false))
  failed_when: false

- name: "Verify power plan was set successfully"
  win_shell: powercfg /getactivescheme
  register: verify_power_scheme
  changed_when: false
  when: 
    - install_categories.power_management | default(true)
    - set_power_plan_result is defined

- name: "Display power management summary"
  debug:
    msg: "Power plan {{ power_management.power_plan | title | replace('_', ' ') }} {{ 'was already active' if plan_already_active | default(false) and not (power_management.force_set | default(false)) else ('set successfully' if set_power_plan_result is defined and set_power_plan_result.rc == 0 else 'failed to set') }}"
  when: install_categories.power_management | default(true) 