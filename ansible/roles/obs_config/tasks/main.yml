---
# OBS Studio Installation Role - Main Tasks
# =========================================
# Downloads OBS Studio and creates portable installations

- name: "Create base Tools directory"
  win_file:
    path: "{{ obs_config.target_base_directory }}"
    state: directory

- name: "Check if OBS installations already exist"
  win_find:
    paths: "{{ obs_config.target_base_directory }}\\{{ item }}"
    patterns: "portable_mode.txt"
    recurse: yes
  register: existing_obs_check
  loop:
    - "Streaming"
    - "Recording" 
    - "Testing"
  failed_when: false

- name: "Set OBS installation status"
  set_fact:
    obs_already_installed: "{{ existing_obs_check.results | selectattr('files', 'defined') | selectattr('files', '!=', []) | list | length == 3 }}"

- name: "Display OBS installation status"
  debug:
    msg: "{{ 'All OBS installations found - skipping download' if obs_already_installed else 'OBS installations not found - proceeding with download' }} ({{ existing_obs_check.results | selectattr('files', 'defined') | selectattr('files', '!=', []) | list | length }}/3)"

- name: "OBS Download and Installation Block"
  block:
    - name: "Create OBS installation directories"
      win_file:
        path: "{{ obs_config.target_base_directory }}\\{{ item }}"
        state: directory
      loop:
        - "Streaming"
        - "Recording" 
        - "Testing"

    - name: "Get latest OBS Studio release info from GitHub"
      uri:
        url: "https://api.github.com/repos/obsproject/obs-studio/releases/latest"
        method: GET
        return_content: yes
      register: obs_release_info
      delegate_to: localhost

    - name: "Extract OBS download URL"
      set_fact:
        obs_download_url: "{{ obs_release_info.json.assets | selectattr('name', 'match', '.*-Windows\\.zip$') | map(attribute='browser_download_url') | first }}"
        obs_version: "{{ obs_release_info.json.tag_name }}"

    - name: "Display OBS version info"
      debug:
        msg: "OBS Studio {{ obs_version }} download URL: {{ obs_download_url }}"

    - name: "Download OBS Studio portable"
      win_get_url:
        url: "{{ obs_download_url }}"
        dest: "{{ obs_config.target_base_directory }}\\obs-studio-{{ obs_version }}.zip"
        timeout: 300
      register: obs_download

    - name: "Extract OBS to Streaming directory"
      win_unzip:
        src: "{{ obs_download.dest }}"
        dest: "{{ obs_config.target_base_directory }}\\Streaming"
        delete_archive: no

    - name: "Extract OBS to Recording directory"
      win_unzip:
        src: "{{ obs_download.dest }}"
        dest: "{{ obs_config.target_base_directory }}\\Recording"
        delete_archive: no

    - name: "Extract OBS to Testing directory"
      win_unzip:
        src: "{{ obs_download.dest }}"
        dest: "{{ obs_config.target_base_directory }}\\Testing"
        delete_archive: no

    - name: "Find OBS executable directories"
      win_find:
        paths: 
          - "{{ obs_config.target_base_directory }}\\Streaming"
          - "{{ obs_config.target_base_directory }}\\Recording"
          - "{{ obs_config.target_base_directory }}\\Testing"
        patterns: "obs64.exe"
        recurse: yes
      register: obs_exe_locations

    - name: "Debug OBS executable locations"
      debug:
        msg: "Found {{ obs_exe_locations.files | length }} OBS executables"

    - name: "Create portable_mode.txt in root of each OBS installation"
      win_copy:
        content: ""
        dest: "{{ obs_config.target_base_directory }}\\{{ item }}\\portable_mode.txt"
      loop:
        - "Streaming"
        - "Recording"
        - "Testing"

    - name: "Verify portable_mode.txt files were created"
      win_find:
        paths: 
          - "{{ obs_config.target_base_directory }}\\Streaming"
          - "{{ obs_config.target_base_directory }}\\Recording"
          - "{{ obs_config.target_base_directory }}\\Testing"
        patterns: "portable_mode.txt"
        recurse: no
      register: portable_mode_verification

    - name: "Display portable mode verification"
      debug:
        msg: "Created {{ portable_mode_verification.files | length }} portable_mode.txt files"

    - name: "Get Desktop path"
      win_shell: |
        $desktopPath = [Environment]::GetFolderPath('Desktop')
        return $desktopPath
      register: desktop_path
      changed_when: false

    - name: "Set base path with proper backslashes"
      set_fact:
        obs_base_path: "{{ obs_config.target_base_directory | replace('/', '\\\\') }}"

    - name: "Create desktop shortcuts for each OBS installation"
      win_shortcut:
        src: "{{ obs_base_path }}\\{{ item }}\\bin\\64bit\\obs64.exe"
        dest: "{{ desktop_path.stdout | trim }}\\OBS ({{ item }}).lnk"
        description: "OBS Studio - {{ item }} Profile"
        icon: "{{ obs_base_path }}\\{{ item }}\\bin\\64bit\\obs64.exe,0"
        directory: "{{ obs_base_path }}\\{{ item }}\\bin\\64bit"
      loop: "{{ obs_config.installation_directories }}"
      register: shortcut_creation

    - name: "Display shortcut creation summary"
      debug:
        msg: "Created {{ obs_config.installation_directories | length }} desktop shortcuts for OBS profiles"

    - name: "Clean up downloaded zip file"
      win_file:
        path: "{{ obs_download.dest }}"
        state: absent
      when: obs_config.cleanup_downloads | default(true)

    - name: "Display OBS installation summary"
      debug:
        msg: "OBS Studio {{ obs_version }} installed - {{ obs_exe_locations.files | length }} portable installations created with {{ portable_mode_verification.files | length }} portable mode files"

    # Plugin Installation Block
    - name: "OBS Plugin Installation Block"
      block:
        - name: "Install plugins for each OBS profile"
          include_tasks: install_plugins.yml
          vars:
            profile_name: "{{ profile_item }}"
            profile_plugins: "{{ obs_plugins[profile_item] | default([]) }}"
          loop: "{{ obs_config.installation_directories }}"
          loop_control:
            loop_var: profile_item
          when: obs_plugins is defined and obs_plugins[profile_item] is defined

        - name: "Display plugin installation summary"
          debug:
            msg: "OBS plugin installation completed for all profiles"

  when: not obs_already_installed

# Plugin Status Check (for both new and existing installations)
- name: "Check plugin status for all profiles"
  include_tasks: check_plugin_status.yml
  vars:
    profile_name: "{{ profile_item }}"
  loop: "{{ obs_config.installation_directories }}"
  loop_control:
    loop_var: profile_item

- name: "Display comprehensive plugin status summary"
  debug:
    msg: "Plugin Status Summary - {{ plugin_status | default({}) | dict2items | map('regex_replace', '^(.*)$', '\\1: ' + (plugin_status[item.key].configured_plugins | string) + ' configured, ' + (plugin_status[item.key].installed_files | string) + ' files') | join(' | ') if plugin_status is defined else 'No plugin status available' }}"
  when: plugin_status is defined

- name: "Display OBS skip summary"
  debug:
    msg: "OBS installations already exist - skipping installation"
  when: obs_already_installed 