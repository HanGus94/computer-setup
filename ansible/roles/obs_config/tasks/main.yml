---
# OBS Studio Installation Role - Main Tasks
# =========================================
# Downloads OBS Studio and creates portable installations

- name: "Create base Tools directory"
  win_file:
    path: "{{ obs_config.target_base_directory }}"
    state: directory

- name: "Check if OBS installations already exist"
  win_find:
    paths: "{{ obs_config.target_base_directory }}\\{{ item }}"
    patterns: "portable_mode.txt"
    recurse: yes
  register: existing_obs_check
  loop:
    - "Streaming"
    - "Recording" 
    - "Testing"
  failed_when: false

- name: "Set OBS installation status"
  set_fact:
    obs_already_installed: "{{ existing_obs_check.results | selectattr('files', 'defined') | selectattr('files', '!=', []) | list | length == 3 }}"

- name: "Display OBS installation status"
  debug:
    msg: |
      üé• OBS Installation Status Check:
      ================================
      {{ 'All OBS installations found - skipping download/deployment' if obs_already_installed else 'OBS installations not found - proceeding with download/deployment' }}
      Existing installations: {{ existing_obs_check.results | selectattr('files', 'defined') | selectattr('files', '!=', []) | list | length }}/3

- name: "OBS Download and Installation Block"
  block:
    - name: "Create OBS installation directories"
      win_file:
        path: "{{ obs_config.target_base_directory }}\\{{ item }}"
        state: directory
      loop:
        - "Streaming"
        - "Recording" 
        - "Testing"

    - name: "Get latest OBS Studio release info from GitHub"
      uri:
        url: "https://api.github.com/repos/obsproject/obs-studio/releases/latest"
        method: GET
        return_content: yes
      register: obs_release_info
      delegate_to: localhost

    - name: "Extract OBS download URL"
      set_fact:
        obs_download_url: "{{ obs_release_info.json.assets | selectattr('name', 'match', '.*-Windows\\.zip$') | map(attribute='browser_download_url') | first }}"
        obs_version: "{{ obs_release_info.json.tag_name }}"

    - name: "Display OBS version info"
      debug:
        msg: |
          üì¶ OBS Studio Download Info:
          ===========================
          Version: {{ obs_version }}
          Download URL: {{ obs_download_url }}

    - name: "Download OBS Studio portable"
      win_get_url:
        url: "{{ obs_download_url }}"
        dest: "{{ obs_config.target_base_directory }}\\obs-studio-{{ obs_version }}.zip"
        timeout: 300
      register: obs_download

    - name: "Extract OBS to Streaming directory"
      win_unzip:
        src: "{{ obs_download.dest }}"
        dest: "{{ obs_config.target_base_directory }}\\Streaming"
        delete_archive: no

    - name: "Extract OBS to Recording directory"
      win_unzip:
        src: "{{ obs_download.dest }}"
        dest: "{{ obs_config.target_base_directory }}\\Recording"
        delete_archive: no

    - name: "Extract OBS to Testing directory"
      win_unzip:
        src: "{{ obs_download.dest }}"
        dest: "{{ obs_config.target_base_directory }}\\Testing"
        delete_archive: no

    - name: "Find OBS executable directories"
      win_find:
        paths: 
          - "{{ obs_config.target_base_directory }}\\Streaming"
          - "{{ obs_config.target_base_directory }}\\Recording"
          - "{{ obs_config.target_base_directory }}\\Testing"
        patterns: "obs64.exe"
        recurse: yes
      register: obs_exe_locations

    - name: "Debug OBS executable locations"
      debug:
        msg: |
          Found OBS executables:
          {% for file in obs_exe_locations.files %}
          - {{ file.path }}
          - Directory: {{ file.path | dirname }}
          {% endfor %}

    - name: "Create portable_mode.txt in root of each OBS installation"
      win_copy:
        content: ""
        dest: "{{ obs_config.target_base_directory }}\\{{ item }}\\portable_mode.txt"
      loop:
        - "Streaming"
        - "Recording"
        - "Testing"

    - name: "Verify portable_mode.txt files were created"
      win_find:
        paths: 
          - "{{ obs_config.target_base_directory }}\\Streaming"
          - "{{ obs_config.target_base_directory }}\\Recording"
          - "{{ obs_config.target_base_directory }}\\Testing"
        patterns: "portable_mode.txt"
        recurse: no
      register: portable_mode_verification

    - name: "Display portable mode verification"
      debug:
        msg: |
          üìù Portable Mode Files Created:
          {% for file in portable_mode_verification.files %}
          - {{ file.path }}
          {% endfor %}
          Total portable_mode.txt files: {{ portable_mode_verification.files | length }}

    - name: "Get Desktop path"
      win_shell: |
        $desktopPath = [Environment]::GetFolderPath('Desktop')
        return $desktopPath
      register: desktop_path
      changed_when: false

    - name: "Extract profile names from OBS executable paths"
      set_fact:
        obs_files_with_profiles: >-
          [
          {% for file in obs_exe_locations.files %}
          {
            'path': '{{ file.path }}',
            'profile_name': '{{ file.path.split("\\")[2] }}'
          }{{ ',' if not loop.last else '' }}
          {% endfor %}
          ]
      when: obs_exe_locations.files is defined and obs_exe_locations.files | length > 0

    - name: "Create desktop shortcuts for each OBS installation"
      win_shortcut:
        src: "{{ item.path }}"
        dest: "{{ desktop_path.stdout | trim }}\\OBS ({{ item.profile_name }}).lnk"
        description: "OBS Studio - {{ item.profile_name }} Profile"
        icon: "{{ item.path }},0"
        directory: "{{ item.path | dirname }}"
      loop: "{{ obs_files_with_profiles }}"
      when: obs_files_with_profiles is defined and obs_files_with_profiles | length > 0
      register: shortcut_creation

    - name: "Display shortcut creation summary"
      debug:
        msg: |
          Desktop Shortcuts Created:
          {% for result in shortcut_creation.results %}
          - {{ result.dest | basename | regex_replace('\\.lnk$', '') }}
          {% endfor %}
          Total shortcuts: {{ shortcut_creation.results | length }}

    - name: "Clean up downloaded zip file"
      win_file:
        path: "{{ obs_download.dest }}"
        state: absent
      when: obs_config.cleanup_downloads | default(true)

    - name: "Display OBS installation summary"
      debug:
        msg: |
          üé• OBS Studio Installation Summary:
          ==================================
          Version: {{ obs_version }}
          Installations Created: {{ obs_exe_locations.files | length }}
          Portable Mode Files: {{ portable_mode_verification.files | length }}
          
          üìÅ Portable OBS Locations:
          {% for file in obs_exe_locations.files %}
          - {{ file.path | dirname | replace(obs_config.target_base_directory + '\\', '') }}
          {% endfor %}
          
          ‚úÖ OBS Studio portable installations completed!
          
          üìù Usage:
          - Each installation is completely portable
          - Launch obs64.exe from any directory to use that configuration
          - Streaming/Recording/Testing have separate settings and profiles

    # Plugin Installation Block
    - name: "OBS Plugin Installation Block"
      block:
        - name: "Install plugins for each OBS profile"
          include_tasks: install_plugins.yml
          vars:
            profile_name: "{{ profile_item }}"
            profile_plugins: "{{ obs_plugins[profile_item] | default([]) }}"
          loop: "{{ obs_config.installation_directories }}"
          loop_control:
            loop_var: profile_item
          when: obs_plugins is defined and obs_plugins[profile_item] is defined

        - name: "Display plugin installation summary"
          debug:
            msg: |
              OBS Plugin Installation Summary:
              ================================
              {% for profile in obs_config.installation_directories %}
              {% if obs_plugins[profile] is defined %}
              {{ profile }} Profile:
              {% for plugin in obs_plugins[profile] %}
              - {{ plugin.name }}
              {% endfor %}
              {% endif %}
              {% endfor %}
              
              [OK] Plugin installations completed!

  when: not obs_already_installed

- name: "Display OBS skip summary"
  debug:
    msg: |
      üé• OBS Studio Installation (Skipped):
      ====================================
      ‚úÖ OBS installations already exist - no action needed!
      
      üìÅ Existing OBS Locations:
      - C:/Tools/Streaming
      - C:/Tools/Recording  
      - C:/Tools/Testing
      
      üìù All installations are portable and ready to use 