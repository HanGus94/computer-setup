---
# Scoop Role - Main Tasks (Admin/Global Installation)
# ===================================================
# Installs Scoop package manager globally for all users

- name: "Check if Scoop is installed globally"
  win_stat:
    path: "C:\\ProgramData\\scoop\\shims\\scoop.exe"
  register: scoop_installed
  tags: [scoop, software]

- name: "Check current PowerShell execution policy"
  win_shell: |
    $localMachine = Get-ExecutionPolicy -Scope LocalMachine
    $currentUser = Get-ExecutionPolicy -Scope CurrentUser
    $process = Get-ExecutionPolicy -Scope Process
    Write-Output "LocalMachine: $localMachine"
    Write-Output "CurrentUser: $currentUser"
    Write-Output "Process: $process"
  register: execution_policies
  tags: [scoop, software]

- name: "Display execution policies"
  debug:
    msg: "{{ execution_policies.stdout_lines }}"
  tags: [scoop, software]

- name: "Install Scoop package manager globally"
  win_shell: |
    # Set execution policy for LocalMachine if needed (admin required)
    $currentPolicy = Get-ExecutionPolicy -Scope LocalMachine
    Write-Output "Current LocalMachine execution policy: $currentPolicy"
    
    if ($currentPolicy -eq "Restricted" -or $currentPolicy -eq "Undefined") {
        Write-Output "Setting execution policy to RemoteSigned for LocalMachine"
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine -Force
        $newPolicy = Get-ExecutionPolicy -Scope LocalMachine
        Write-Output "New LocalMachine execution policy: $newPolicy"
    }
    
    # Set for current process to be safe
    Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
    
    # Set security protocol
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    
    # Set environment variables for global installation
    $env:SCOOP_GLOBAL = "C:\ProgramData\scoop"
    [System.Environment]::SetEnvironmentVariable("SCOOP_GLOBAL", "C:\ProgramData\scoop", "Machine")
    
    Write-Output "Downloading Scoop installer..."
    try {
        iex "& {$(irm get.scoop.sh)} -RunAsAdmin"
        Write-Output "Scoop installation completed"
    } catch {
        Write-Output "Error during Scoop installation: $($_.Exception.Message)"
        throw $_
    }
    
    # Wait a moment for installation to settle
    Start-Sleep -Seconds 5
    
    # Verify installation
    $scoopDir = "C:\ProgramData\scoop"
    if (Test-Path $scoopDir) {
        Write-Output "Scoop directory created successfully at: $scoopDir"
        $shimsDir = "$scoopDir\shims"
        if (Test-Path $shimsDir) {
            Write-Output "Shims directory found: $shimsDir"
        } else {
            Write-Output "Warning: Shims directory not found"
        }
    } else {
        throw "Scoop directory not created at $scoopDir"
    }
  when: not scoop_installed.stat.exists
  register: scoop_install_result
  tags: [scoop, software]

- name: "Display Scoop installation result"
  debug:
    msg: "{{ scoop_install_result.stdout_lines }}"
  when: scoop_install_result is changed
  tags: [scoop, software]

- name: "Refresh environment variables after Scoop installation"
  win_shell: |
    # Refresh PATH to include Scoop (global installation)
    Write-Output "Refreshing environment variables..."
    
    # Get current system PATH
    $systemPath = [System.Environment]::GetEnvironmentVariable("PATH", "Machine")
    Write-Output "Current system PATH: $systemPath"
    
    # Add Scoop paths if not present
    $scoopShims = "C:\ProgramData\scoop\shims"
    $scoopApps = "C:\ProgramData\scoop\apps\scoop\current\bin"
    
    if ($systemPath -notlike "*$scoopShims*") {
        $newSystemPath = "$scoopShims;$systemPath"
        [System.Environment]::SetEnvironmentVariable("PATH", $newSystemPath, "Machine")
        Write-Output "Added Scoop shims to system PATH"
    }
    
    # Update current session PATH
    $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")
    
    Write-Output "Environment refresh completed"
    Write-Output "Current session PATH: $env:PATH"
  when: scoop_install_result is changed
  tags: [scoop, software]

- name: "Verify Scoop installation"
  win_shell: |
    # Try multiple possible paths for Scoop (global installation)
    $scoopPaths = @(
        "C:\ProgramData\scoop\shims\scoop.exe",
        "C:\ProgramData\scoop\apps\scoop\current\bin\scoop.ps1",
        "C:\ProgramData\scoop\shims\scoop.ps1"
    )
    
    $scoopFound = $false
    $scoopCommand = $null
    
    # First try to find scoop command directly
    try {
        $scoopCmd = Get-Command scoop -ErrorAction SilentlyContinue
        if ($scoopCmd) {
            $version = scoop --version 2>$null
            if ($version) {
                Write-Output "Scoop found via command: $version"
                $scoopFound = $true
            }
        }
    } catch {}
    
    # If not found, try specific paths
    if (-not $scoopFound) {
        foreach ($path in $scoopPaths) {
            if (Test-Path $path) {
                Write-Output "Found Scoop at: $path"
                try {
                    if ($path -like "*.ps1") {
                        $version = & powershell -File $path --version 2>$null
                    } else {
                        $version = & $path --version 2>$null
                    }
                    if ($version) {
                        Write-Output "Scoop version: $version"
                        $scoopFound = $true
                        $scoopCommand = $path
                        break
                    }
                } catch {
                    Write-Output "Failed to execute Scoop at $path : $($_.Exception.Message)"
                }
            }
        }
    }
    
    if (-not $scoopFound) {
        Write-Output "Scoop paths checked:"
        foreach ($path in $scoopPaths) {
            $exists = Test-Path $path
            Write-Output "  $path : $exists"
        }
        throw "Scoop installation verification failed - executable not found"
    }
  register: scoop_version
  changed_when: false
  tags: [scoop, software]

- name: "Display Scoop version"
  debug:
    msg: "Scoop version: {{ scoop_version.stdout | trim }}"
  tags: [scoop, software]

- name: "Add essential Scoop buckets"
  win_shell: scoop bucket add {{ item }}
  register: bucket_results
  failed_when: false
  loop:
    - "extras"
    - "versions"
  changed_when: 
    - bucket_results.rc == 0
    - "'already exists' not in bucket_results.stdout"
  tags: [scoop, software]

- name: "Install Scoop packages globally"
  win_shell: |
    # Try to find scoop command
    $scoopCmd = Get-Command scoop -ErrorAction SilentlyContinue
    if ($scoopCmd) {
        $scoopPath = "scoop"
    } else {
        $scoopPath = "C:\ProgramData\scoop\shims\scoop.exe"
        if (-not (Test-Path $scoopPath)) {
            $scoopPath = "C:\ProgramData\scoop\apps\scoop\current\bin\scoop.ps1"
        }
    }
    
    # Check if package is already installed globally
    $installedPackages = & $scoopPath list 2>$null | Out-String
    if ($installedPackages -match "{{ item.name }}") {
        Write-Output "Package {{ item.name }} already installed"
        exit 0
    }
    
    # Install the package globally
    Write-Output "Installing {{ item.name }} globally"
    $result = & $scoopPath install -g {{ item.name }} 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Output "Successfully installed {{ item.name }} globally"
        exit 0
    } else {
        Write-Output "Failed to install {{ item.name }}: $result"
        exit 1
    }
  register: scoop_install_results
  failed_when: false
  loop: "{{ scoop.packages }}"
  when: install_categories.scoop_packages | default(true)
  changed_when: "'Successfully installed' in item.stdout"
  tags: [scoop, software, packages]

- name: "Report Scoop package failures"
  debug:
    msg: "Failed to install Scoop package: {{ item.item.name }} - {{ item.item.description }}"
  loop: "{{ scoop_install_results.results }}"
  when: 
    - scoop_install_results is defined
    - item.failed | default(false)
    - error_handling.package_failure_is_warning | default(true)
  tags: [scoop, software, packages]

- name: "Create Scoop installation summary"
  set_fact:
    scoop_summary:
      packages_installed: "{{ scoop_install_results.results | default([]) | selectattr('failed', 'undefined') | list | length }}/{{ scoop.packages | length }}"
      buckets_added: "{{ bucket_results.results | default([]) | selectattr('failed', 'undefined') | list | length }}/2"
  tags: [scoop, software]

- name: "Display Scoop installation summary"
  debug:
    msg: |
      ðŸ“¦ Scoop Installation Summary (Global):
      =======================================
      Scoop Version: {{ scoop_version.stdout | trim }}
      Installation Path: C:\ProgramData\scoop
      Buckets Added: {{ scoop_summary.buckets_added }}
      Packages Installed: {{ scoop_summary.packages_installed }}
      
      âœ… Scoop global package installation completed!
  tags: [scoop, software] 