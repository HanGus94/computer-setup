---
# Main Computer Setup Playbook
# ============================
# This playbook orchestrates the complete Windows computer setup process

- name: "Computer Setup - Complete Windows Configuration"
  hosts: windows
  gather_facts: yes
  become: no  # Run as regular user by default
  
  vars:
    setup_start_time: "{{ ansible_date_time.iso8601 }}"
  
  pre_tasks:
    - name: "Display setup information"
      debug:
        msg: |
          =======================================================
          Windows Computer Setup Starting
          =======================================================
          Target Host: {{ inventory_hostname }}
          Setup Time: {{ setup_start_time }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}
          =======================================================
      tags: always

    - name: "Verify PowerShell execution policy"
      win_shell: Get-ExecutionPolicy -Scope CurrentUser
      register: execution_policy
      changed_when: false
      tags: always

    - name: "Set PowerShell execution policy if needed"
      win_shell: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
      when: execution_policy.stdout.strip() == "Restricted"
      tags: always

  tasks:
    # Software Installation
    - name: "Install Chocolatey and Software Packages"
      include_role:
        name: chocolatey
      tags:
        - software
        - chocolatey
    
    # Scoop Package Installation
    - name: "Install Scoop and Scoop-only Packages (Admin Mode)"
      include_role:
        name: scoop
      tags:
        - software
        - scoop
    
    # Windows Features
    - block:
        - name: "Enable Windows Features"
          include_role:
            name: windows_features
          register: windows_features_result
      become: yes  # Need admin for Windows features
      tags:
        - features
        - windows_features

    # Reboot after Windows Features (if any were changed)
    - name: "Reboot after Windows Features installation"
      win_reboot:
        reboot_timeout: 900  # 15 minutes
        connect_timeout: 60  # 1 minute to start responding
        msg: "Rebooting to complete Windows Features installation"
        pre_reboot_delay: 10  # Wait 10 seconds before rebooting
        post_reboot_delay: 30  # Wait 30 seconds after reboot before testing connection
        test_command: "whoami"  # Simple command to test if system is ready
      become: yes  # Need admin for reboot
      when: 
        - windows_features_result is defined
        - windows_features_result is changed
      tags:
        - features
        - windows_features
        - reboot
    
    # PowerShell Configuration
    - name: "Deploy PowerShell Configuration"
      include_role:
        name: powershell_config
      tags:
        - config
        - powershell
    
    # OBS Configuration
    - name: "Deploy OBS Configuration"
      include_role:
        name: obs_config
      tags:
        - config
        - obs
    
    # Firefox Configuration
    - name: "Deploy Firefox Configuration"
      include_role:
        name: firefox_config
      tags:
        - config
        - firefox

  post_tasks:
    - name: "Setup completion summary"
      debug:
        msg: |
          =======================================================
          Windows Computer Setup Complete!
          =======================================================
          Started: {{ setup_start_time }}
          Completed: {{ ansible_date_time.iso8601 }}
          Host: {{ inventory_hostname }}
          
          Next Steps:
          - Launch applications to verify installation
          - Configure application-specific settings as needed
          =======================================================
      tags: always

    - name: "Check if final reboot is required"
      win_shell: |
        # Check if reboot is pending
        $rebootRequired = $false
        
        # Check Windows Update reboot flag
        if (Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired" -ErrorAction SilentlyContinue) {
            $rebootRequired = $true
        }
        
        # Check Component Based Servicing reboot flag
        if (Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootRequired" -ErrorAction SilentlyContinue) {
            $rebootRequired = $true
        }
        
        # Check if file rename operations are pending
        if (Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager" -Name "PendingFileRenameOperations" -ErrorAction SilentlyContinue) {
            $rebootRequired = $true
        }
        
        return $rebootRequired
      register: final_reboot_required
      changed_when: false
      tags: always

    - name: "Final reboot notification"
      debug:
        msg: |
          âœ… Setup completed successfully!
          {{ 'A final reboot is recommended but not required.' if final_reboot_required.stdout | trim | bool else 'No reboot required.' }}
      tags: always

    - name: "Optional final reboot"
      win_reboot:
        reboot_timeout: 600  # 10 minutes
        connect_timeout: 60  # 1 minute to start responding  
        msg: "Final reboot to complete all system changes"
        pre_reboot_delay: 10
        post_reboot_delay: 30
        test_command: "whoami"
      when: 
        - final_reboot_required.stdout | trim | bool
        - reboot.auto_reboot | default(true) | bool  # Changed default to true
      tags: always 